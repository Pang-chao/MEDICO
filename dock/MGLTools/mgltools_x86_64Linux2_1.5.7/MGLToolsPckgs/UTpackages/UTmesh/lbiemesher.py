# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_lbiemesher', [dirname(__file__)])
        except ImportError:
            import _lbiemesher
            return _lbiemesher
        if fp is not None:
            try:
                _mod = imp.load_module('_lbiemesher', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _lbiemesher = swig_import_helper()
    del swig_import_helper
else:
    import _lbiemesher
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_lbiemesher.DEFAULT_ERR_swigconstant(_lbiemesher)
DEFAULT_ERR = _lbiemesher.DEFAULT_ERR

_lbiemesher.DEFAULT_ERR_IN_swigconstant(_lbiemesher)
DEFAULT_ERR_IN = _lbiemesher.DEFAULT_ERR_IN

_lbiemesher.DEFAULT_IVAL_swigconstant(_lbiemesher)
DEFAULT_IVAL = _lbiemesher.DEFAULT_IVAL

_lbiemesher.DEFAULT_IVAL_IN_swigconstant(_lbiemesher)
DEFAULT_IVAL_IN = _lbiemesher.DEFAULT_IVAL_IN

_lbiemesher.SINGLE_swigconstant(_lbiemesher)
SINGLE = _lbiemesher.SINGLE

_lbiemesher.HEXA_swigconstant(_lbiemesher)
HEXA = _lbiemesher.HEXA

_lbiemesher.DOUBLE_swigconstant(_lbiemesher)
DOUBLE = _lbiemesher.DOUBLE

_lbiemesher.TETRA_swigconstant(_lbiemesher)
TETRA = _lbiemesher.TETRA

_lbiemesher.T_4_H_swigconstant(_lbiemesher)
T_4_H = _lbiemesher.T_4_H

_lbiemesher.TETRA2_swigconstant(_lbiemesher)
TETRA2 = _lbiemesher.TETRA2
class LBIE_Mesher(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LBIE_Mesher, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LBIE_Mesher, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _lbiemesher.new_LBIE_Mesher(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _lbiemesher.delete_LBIE_Mesher
    __del__ = lambda self: None
    __swig_setmethods__["oc"] = _lbiemesher.LBIE_Mesher_oc_set
    __swig_getmethods__["oc"] = _lbiemesher.LBIE_Mesher_oc_get
    if _newclass:
        oc = _swig_property(_lbiemesher.LBIE_Mesher_oc_get, _lbiemesher.LBIE_Mesher_oc_set)

    def inputData(self, *args, **kwargs):
        return _lbiemesher.LBIE_Mesher_inputData(self, *args, **kwargs)

    def fileOpen(self, *args, **kwargs):
        return _lbiemesher.LBIE_Mesher_fileOpen(self, *args, **kwargs)

    def fileSave(self, *args, **kwargs):
        return _lbiemesher.LBIE_Mesher_fileSave(self, *args, **kwargs)

    def setMesh(self, *args, **kwargs):
        return _lbiemesher.LBIE_Mesher_setMesh(self, *args, **kwargs)

    def errorChange(self, *args, **kwargs):
        return _lbiemesher.LBIE_Mesher_errorChange(self, *args, **kwargs)

    def errorChange_in(self, *args, **kwargs):
        return _lbiemesher.LBIE_Mesher_errorChange_in(self, *args, **kwargs)

    def isovalueChange(self, *args, **kwargs):
        return _lbiemesher.LBIE_Mesher_isovalueChange(self, *args, **kwargs)

    def isovalueChange_in(self, *args, **kwargs):
        return _lbiemesher.LBIE_Mesher_isovalueChange_in(self, *args, **kwargs)

    def outTriangle(self, *args, **kwargs):
        return _lbiemesher.LBIE_Mesher_outTriangle(self, *args, **kwargs)

    def outTetra(self, *args, **kwargs):
        return _lbiemesher.LBIE_Mesher_outTetra(self, *args, **kwargs)

    def outHexa(self, *args, **kwargs):
        return _lbiemesher.LBIE_Mesher_outHexa(self, *args, **kwargs)

    def outQuad(self, *args, **kwargs):
        return _lbiemesher.LBIE_Mesher_outQuad(self, *args, **kwargs)

    def getNumFaces(self, *args, **kwargs):
        return _lbiemesher.LBIE_Mesher_getNumFaces(self, *args, **kwargs)

    def getNumVerts(self, *args, **kwargs):
        return _lbiemesher.LBIE_Mesher_getNumVerts(self, *args, **kwargs)

    def getVolMin(self, *args, **kwargs):
        return _lbiemesher.LBIE_Mesher_getVolMin(self, *args, **kwargs)

    def getVolMax(self, *args, **kwargs):
        return _lbiemesher.LBIE_Mesher_getVolMax(self, *args, **kwargs)

    def getOuterSurface(self, *args, **kwargs):
        return _lbiemesher.LBIE_Mesher_getOuterSurface(self, *args, **kwargs)

    def setXCutPlane(self, *args, **kwargs):
        return _lbiemesher.LBIE_Mesher_setXCutPlane(self, *args, **kwargs)

    def setZCutPlane(self, *args, **kwargs):
        return _lbiemesher.LBIE_Mesher_setZCutPlane(self, *args, **kwargs)

    def getSurface(self, *args, **kwargs):
        return _lbiemesher.LBIE_Mesher_getSurface(self, *args, **kwargs)
LBIE_Mesher_swigregister = _lbiemesher.LBIE_Mesher_swigregister
LBIE_Mesher_swigregister(LBIE_Mesher)

# This file is compatible with both classic and new-style classes.


